/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 39 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 67 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 70 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 40 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 85 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 269 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 88 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 100 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 103 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 106 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 109 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 112 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 115 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 31 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 118 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 121 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 124 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 127 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/path.sip"
#include <path.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/path.sip"
#include <path.h>
#line 156 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffect.cpp"


class sipPhonon_Effect : public Phonon::Effect
{
public:
    sipPhonon_Effect(const Phonon::EffectDescription&,QObject*);
    virtual ~sipPhonon_Effect();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_Effect(const sipPhonon_Effect &);
    sipPhonon_Effect &operator = (const sipPhonon_Effect &);

    char sipPyMethods[7];
};

sipPhonon_Effect::sipPhonon_Effect(const Phonon::EffectDescription& a0,QObject*a1): Phonon::Effect(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_Effect::~sipPhonon_Effect()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_Effect::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_Effect);
}

int sipPhonon_Effect::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::Effect::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_Effect,_c,_id,_a);

    return _id;
}

void *sipPhonon_Effect::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_Effect, _clname)) ? this : Phonon::Effect::qt_metacast(_clname);
}

void sipPhonon_Effect::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        Phonon::Effect::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_Effect::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        Phonon::Effect::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_Effect::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        Phonon::Effect::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_Effect::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        Phonon::Effect::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_phonon_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_Effect::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        Phonon::Effect::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_phonon_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_Effect::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return Phonon::Effect::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipPhonon_Effect::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return Phonon::Effect::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_Phonon_Effect_description, "description(self) -> Phonon.EffectDescription");

extern "C" {static PyObject *meth_Phonon_Effect_description(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Effect_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::Effect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Effect, &sipCpp))
        {
            Phonon::EffectDescription*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectDescription(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Effect, sipName_description, doc_Phonon_Effect_description);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Effect_parameters, "parameters(self) -> object");

extern "C" {static PyObject *meth_Phonon_Effect_parameters(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Effect_parameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::Effect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_Effect, &sipCpp))
        {
            QList<Phonon::EffectParameter>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::EffectParameter>(sipCpp->parameters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_EffectParameter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Effect, sipName_parameters, doc_Phonon_Effect_parameters);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Effect_parameterValue, "parameterValue(self, Phonon.EffectParameter) -> QVariant");

extern "C" {static PyObject *meth_Phonon_Effect_parameterValue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Effect_parameterValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectParameter* a0;
        const Phonon::Effect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_Effect, &sipCpp, sipType_Phonon_EffectParameter, &a0))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->parameterValue(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Effect, sipName_parameterValue, doc_Phonon_Effect_parameterValue);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_Effect_setParameterValue, "setParameterValue(self, Phonon.EffectParameter, QVariant)");

extern "C" {static PyObject *meth_Phonon_Effect_setParameterValue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_Effect_setParameterValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectParameter* a0;
        const QVariant* a1;
        int a1State = 0;
        Phonon::Effect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_Phonon_Effect, &sipCpp, sipType_Phonon_EffectParameter, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setParameterValue(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Effect, sipName_setParameterValue, doc_Phonon_Effect_setParameterValue);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_Phonon_Effect(void *, const sipTypeDef *);}
static void *cast_Phonon_Effect(void *sipCppV, const sipTypeDef *targetType)
{
    Phonon::Effect *sipCpp = reinterpret_cast<Phonon::Effect *>(sipCppV);

    if (targetType == sipType_Phonon_MediaNode)
        return static_cast<Phonon::MediaNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_Effect(void *, int);}
static void release_Phonon_Effect(void *sipCppV,int)
{
    Phonon::Effect *sipCpp = reinterpret_cast<Phonon::Effect *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_Effect(sipSimpleWrapper *);}
static void dealloc_Phonon_Effect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_Effect *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_Effect(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_Phonon_Effect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_Effect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_Effect *sipCpp = 0;

    {
        const Phonon::EffectDescription* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_Phonon_EffectDescription, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_Effect(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_Effect[] = {{141, 0, 0}, {23, 255, 1}};


static PyMethodDef methods_Phonon_Effect[] = {
    {SIP_MLNAME_CAST(sipName_description), meth_Phonon_Effect_description, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Effect_description)},
    {SIP_MLNAME_CAST(sipName_parameterValue), meth_Phonon_Effect_parameterValue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Effect_parameterValue)},
    {SIP_MLNAME_CAST(sipName_parameters), meth_Phonon_Effect_parameters, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Effect_parameters)},
    {SIP_MLNAME_CAST(sipName_setParameterValue), meth_Phonon_Effect_setParameterValue, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_Effect_setParameterValue)}
};

PyDoc_STRVAR(doc_Phonon_Effect, "\1Phonon.Effect(Phonon.EffectDescription, parent: QObject = None)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_Effect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__Effect,
        {0}
    },
    {
        sipNameNr_Effect,
        {0, 255, 0},
        4, methods_Phonon_Effect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_Effect,
    -1,
    -1,
    supers_Phonon_Effect,
    0,
    init_type_Phonon_Effect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_Effect,
    0,
    0,
    0,
    release_Phonon_Effect,
    cast_Phonon_Effect,
    0,
    0,
    0,
    0,
    0,
    0
},
    &Phonon::Effect::staticMetaObject,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 78 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 53 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/medianode.sip"
#include <medianode.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 39 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 87 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 31 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 90 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 93 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 96 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 105 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 108 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 269 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 111 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 623 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 114 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 117 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 120 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 123 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 126 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 132 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 135 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 138 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 141 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 144 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 147 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 150 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 153 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 31 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 156 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 159 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 162 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectDescriptionModel.cpp"


class sipPhonon_EffectDescriptionModel : public Phonon::EffectDescriptionModel
{
public:
    sipPhonon_EffectDescriptionModel(QObject*);
    sipPhonon_EffectDescriptionModel(const QList<Phonon::EffectDescription>&,QObject*);
    virtual ~sipPhonon_EffectDescriptionModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    int rowCount(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_EffectDescriptionModel(const sipPhonon_EffectDescriptionModel &);
    sipPhonon_EffectDescriptionModel &operator = (const sipPhonon_EffectDescriptionModel &);

    char sipPyMethods[33];
};

sipPhonon_EffectDescriptionModel::sipPhonon_EffectDescriptionModel(QObject*a0): Phonon::EffectDescriptionModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_EffectDescriptionModel::sipPhonon_EffectDescriptionModel(const QList<Phonon::EffectDescription>& a0,QObject*a1): Phonon::EffectDescriptionModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_EffectDescriptionModel::~sipPhonon_EffectDescriptionModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_EffectDescriptionModel::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_EffectDescriptionModel);
}

int sipPhonon_EffectDescriptionModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::EffectDescriptionModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_EffectDescriptionModel,_c,_id,_a);

    return _id;
}

void *sipPhonon_EffectDescriptionModel::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_EffectDescriptionModel, _clname)) ? this : Phonon::EffectDescriptionModel::qt_metacast(_clname);
}

void sipPhonon_EffectDescriptionModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_phonon_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_phonon_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectDescriptionModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipPhonon_EffectDescriptionModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_phonon_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipPhonon_EffectDescriptionModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_phonon_QtCore->em_virthandlers[7]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipPhonon_EffectDescriptionModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::span(a0);

    typedef QSize (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_phonon_QtCore->em_virthandlers[47]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndexList sipPhonon_EffectDescriptionModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_48)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_48)(sipModuleAPI_phonon_QtCore->em_virthandlers[48]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipPhonon_EffectDescriptionModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_44)(sipModuleAPI_phonon_QtCore->em_virthandlers[44]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_49)(sipModuleAPI_phonon_QtCore->em_virthandlers[49]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipPhonon_EffectDescriptionModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_50)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_50)(sipModuleAPI_phonon_QtCore->em_virthandlers[50]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectDescriptionModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_phonon_QtCore->em_virthandlers[42]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectDescriptionModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        Phonon::EffectDescriptionModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_51)(sipModuleAPI_phonon_QtCore->em_virthandlers[51]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectDescriptionModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_phonon_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipPhonon_EffectDescriptionModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_phonon_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipPhonon_EffectDescriptionModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_phonon_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipPhonon_EffectDescriptionModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_52)(sipModuleAPI_phonon_QtCore->em_virthandlers[52]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

Qt::DropActions sipPhonon_EffectDescriptionModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_53)(sipModuleAPI_phonon_QtCore->em_virthandlers[53]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipPhonon_EffectDescriptionModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_phonon_QtCore->em_virthandlers[45]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QMimeData* sipPhonon_EffectDescriptionModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_54)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_54)(sipModuleAPI_phonon_QtCore->em_virthandlers[54]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QStringList sipPhonon_EffectDescriptionModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_phonon_QtCore->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipPhonon_EffectDescriptionModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_55)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_55)(sipModuleAPI_phonon_QtCore->em_virthandlers[55]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipPhonon_EffectDescriptionModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_56)(sipModuleAPI_phonon_QtCore->em_virthandlers[56]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectDescriptionModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_57)(sipModuleAPI_phonon_QtCore->em_virthandlers[57]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QVariant sipPhonon_EffectDescriptionModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_58)(sipModuleAPI_phonon_QtCore->em_virthandlers[58]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipPhonon_EffectDescriptionModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_phonon_QtCore->em_virthandlers[59]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipPhonon_EffectDescriptionModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_60)(sipModuleAPI_phonon_QtCore->em_virthandlers[60]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipPhonon_EffectDescriptionModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::rowCount(a0);

    typedef int (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_43)(sipModuleAPI_phonon_QtCore->em_virthandlers[43]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QModelIndex sipPhonon_EffectDescriptionModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return Phonon::EffectDescriptionModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_46)(sipModuleAPI_phonon_QtCore->em_virthandlers[46]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_tupleIndexOrder, "tupleIndexOrder(self) -> object");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_tupleIndexOrder(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_tupleIndexOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp))
        {
            QList<int>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->tupleIndexOrder());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_tupleIndexOrder, doc_Phonon_EffectDescriptionModel_tupleIndexOrder);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex, "tupleIndexAtPositionIndex(self, int) -> int");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tupleIndexAtPositionIndex(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_tupleIndexAtPositionIndex, doc_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_moveUp, "moveUp(self, QModelIndex)");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_moveUp(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_moveUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveUp(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_moveUp, doc_Phonon_EffectDescriptionModel_moveUp);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_moveDown, "moveDown(self, QModelIndex)");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_moveDown(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_moveDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveDown(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_moveDown, doc_Phonon_EffectDescriptionModel_moveDown);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_setModelData, "setModelData(self, object)");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_setModelData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<Phonon::EffectDescription>* a0;
        int a0State = 0;
        Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QList_0100Phonon_EffectDescription,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelData(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<Phonon::EffectDescription> *>(a0),sipType_QList_0100Phonon_EffectDescription,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_setModelData, doc_Phonon_EffectDescriptionModel_setModelData);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_modelData, "modelData(self) -> object\n"
    "modelData(self, QModelIndex) -> Phonon.EffectDescription");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_modelData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_modelData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp))
        {
            QList<Phonon::EffectDescription>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::EffectDescription>(sipCpp->modelData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_EffectDescription,NULL);
        }
    }

    {
        const QModelIndex* a0;
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Phonon::EffectDescription*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::EffectDescription(sipCpp->modelData(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_EffectDescription,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_modelData, doc_Phonon_EffectDescriptionModel_modelData);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const Phonon::EffectDescriptionModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_rowCount, doc_Phonon_EffectDescriptionModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const Phonon::EffectDescriptionModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_data, doc_Phonon_EffectDescriptionModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_flags(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_flags, doc_Phonon_EffectDescriptionModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_mimeData, "mimeData(self, object) -> QMimeData");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_mimeData, doc_Phonon_EffectDescriptionModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp))
        {
            Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_supportedDropActions, doc_Phonon_EffectDescriptionModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_dropMimeData, doc_Phonon_EffectDescriptionModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        Phonon::EffectDescriptionModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_removeRows, doc_Phonon_EffectDescriptionModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel_mimeTypes, "mimeTypes(self) -> QStringList");

extern "C" {static PyObject *meth_Phonon_EffectDescriptionModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_Phonon_EffectDescriptionModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const Phonon::EffectDescriptionModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Phonon_EffectDescriptionModel, &sipCpp))
        {
            QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->Phonon::EffectDescriptionModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EffectDescriptionModel, sipName_mimeTypes, doc_Phonon_EffectDescriptionModel_mimeTypes);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_EffectDescriptionModel(void *, int);}
static void release_Phonon_EffectDescriptionModel(void *sipCppV,int)
{
    Phonon::EffectDescriptionModel *sipCpp = reinterpret_cast<Phonon::EffectDescriptionModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_EffectDescriptionModel(sipSimpleWrapper *);}
static void dealloc_Phonon_EffectDescriptionModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_EffectDescriptionModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_EffectDescriptionModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_Phonon_EffectDescriptionModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_EffectDescriptionModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_EffectDescriptionModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_EffectDescriptionModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QList<Phonon::EffectDescription>* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QList_0100Phonon_EffectDescription,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_EffectDescriptionModel(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList<Phonon::EffectDescription> *>(a0),sipType_QList_0100Phonon_EffectDescription,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_EffectDescriptionModel[] = {{14, 0, 1}};


static PyMethodDef methods_Phonon_EffectDescriptionModel[] = {
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_Phonon_EffectDescriptionModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_Phonon_EffectDescriptionModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_flags), meth_Phonon_EffectDescriptionModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_flags)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_Phonon_EffectDescriptionModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_Phonon_EffectDescriptionModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_modelData), meth_Phonon_EffectDescriptionModel_modelData, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_modelData)},
    {SIP_MLNAME_CAST(sipName_moveDown), meth_Phonon_EffectDescriptionModel_moveDown, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_moveDown)},
    {SIP_MLNAME_CAST(sipName_moveUp), meth_Phonon_EffectDescriptionModel_moveUp, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_moveUp)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_Phonon_EffectDescriptionModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_Phonon_EffectDescriptionModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_Phonon_EffectDescriptionModel_setModelData, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_setModelData)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_Phonon_EffectDescriptionModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_tupleIndexAtPositionIndex), meth_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_tupleIndexAtPositionIndex)},
    {SIP_MLNAME_CAST(sipName_tupleIndexOrder), meth_Phonon_EffectDescriptionModel_tupleIndexOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_Phonon_EffectDescriptionModel_tupleIndexOrder)}
};

PyDoc_STRVAR(doc_Phonon_EffectDescriptionModel, "\1Phonon.EffectDescriptionModel(parent: QObject = None)\n"
    "Phonon.EffectDescriptionModel(object, parent: QObject = None)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_EffectDescriptionModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__EffectDescriptionModel,
        {0}
    },
    {
        sipNameNr_EffectDescriptionModel,
        {0, 255, 0},
        14, methods_Phonon_EffectDescriptionModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_EffectDescriptionModel,
    -1,
    -1,
    supers_Phonon_EffectDescriptionModel,
    0,
    init_type_Phonon_EffectDescriptionModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_EffectDescriptionModel,
    0,
    0,
    0,
    release_Phonon_EffectDescriptionModel,
    0,
    0,
    0,
    0,
    0,
    0,
    0
},
    &Phonon::EffectDescriptionModel::staticMetaObject,
    0,
    0
};

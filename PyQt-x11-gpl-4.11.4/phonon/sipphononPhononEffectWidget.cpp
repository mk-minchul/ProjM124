/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 43 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/phonon/effect.sip"
#include <effect.h>
#line 57 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 32 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 60 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 34 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 66 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 34 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 75 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 78 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 31 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 84 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 87 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 90 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 93 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 32 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 96 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 99 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 102 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 105 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 108 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 111 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 114 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 117 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 123 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 269 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 126 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 651 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 132 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 611 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 600 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 743 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 796 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 769 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 785 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 858 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 622 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 578 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 565 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 552 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 478 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 256 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 186 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 189 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 34 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 192 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 195 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 198 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 201 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 204 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 207 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 210 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 213 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 216 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 219 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 222 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 228 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 231 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 234 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 237 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 240 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 246 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/phonon/sipphononPhononEffectWidget.cpp"


class sipPhonon_EffectWidget : public Phonon::EffectWidget
{
public:
    sipPhonon_EffectWidget(Phonon::Effect*,QWidget*);
    virtual ~sipPhonon_EffectWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool event(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_EffectWidget(const sipPhonon_EffectWidget &);
    sipPhonon_EffectWidget &operator = (const sipPhonon_EffectWidget &);

    char sipPyMethods[47];
};

sipPhonon_EffectWidget::sipPhonon_EffectWidget(Phonon::Effect*a0,QWidget*a1): Phonon::EffectWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_EffectWidget::~sipPhonon_EffectWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_EffectWidget::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_EffectWidget);
}

int sipPhonon_EffectWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::EffectWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_EffectWidget,_c,_id,_a);

    return _id;
}

void *sipPhonon_EffectWidget::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast(sipPySelf, sipType_Phonon_EffectWidget, _clname)) ? this : Phonon::EffectWidget::qt_metacast(_clname);
}

void sipPhonon_EffectWidget::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        Phonon::EffectWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        Phonon::EffectWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_phonon_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_phonon_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_phonon_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return Phonon::EffectWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipPhonon_EffectWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        Phonon::EffectWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_phonon_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipPhonon_EffectWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        Phonon::EffectWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        Phonon::EffectWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_phonon_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        Phonon::EffectWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_phonon_QtGui->em_virthandlers[10]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        Phonon::EffectWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return Phonon::EffectWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_phonon_QtGui->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipPhonon_EffectWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return Phonon::EffectWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_phonon_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtGui_13)(sipModuleAPI_phonon_QtGui->em_virthandlers[13]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipPhonon_EffectWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return Phonon::EffectWidget::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_phonon_QtGui->em_virthandlers[14]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_phonon_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_phonon_QtGui->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtGui_15)(sipModuleAPI_phonon_QtGui->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtGui_16)(sipModuleAPI_phonon_QtGui->em_virthandlers[16]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtGui_17)(sipModuleAPI_phonon_QtGui->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtGui_18)(sipModuleAPI_phonon_QtGui->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtGui_19)(sipModuleAPI_phonon_QtGui->em_virthandlers[19]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_20)(sipModuleAPI_phonon_QtGui->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtGui_21)(sipModuleAPI_phonon_QtGui->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtGui_22)(sipModuleAPI_phonon_QtGui->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_phonon_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_23)(sipModuleAPI_phonon_QtGui->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_phonon_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_phonon_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_phonon_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_phonon_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipPhonon_EffectWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        Phonon::EffectWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipPhonon_EffectWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return Phonon::EffectWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipPhonon_EffectWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return Phonon::EffectWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipPhonon_EffectWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return Phonon::EffectWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_28)(sipModuleAPI_phonon_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipPhonon_EffectWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return Phonon::EffectWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}

QSize sipPhonon_EffectWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return Phonon::EffectWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipPhonon_EffectWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        Phonon::EffectWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_phonon_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipPhonon_EffectWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return Phonon::EffectWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_phonon_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_Phonon_EffectWidget(void *, const sipTypeDef *);}
static void *cast_Phonon_EffectWidget(void *sipCppV, const sipTypeDef *targetType)
{
    Phonon::EffectWidget *sipCpp = reinterpret_cast<Phonon::EffectWidget *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_EffectWidget(void *, int);}
static void release_Phonon_EffectWidget(void *sipCppV,int)
{
    Phonon::EffectWidget *sipCpp = reinterpret_cast<Phonon::EffectWidget *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_EffectWidget(sipSimpleWrapper *);}
static void dealloc_Phonon_EffectWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_EffectWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_EffectWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_Phonon_EffectWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Phonon_EffectWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipPhonon_EffectWidget *sipCpp = 0;

    {
        Phonon::Effect* a0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_Phonon_Effect, &a0, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_EffectWidget(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_EffectWidget[] = {{755, 1, 1}};

PyDoc_STRVAR(doc_Phonon_EffectWidget, "\1Phonon.EffectWidget(Phonon.Effect, parent: QWidget = None)");


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_EffectWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__EffectWidget,
        {0}
    },
    {
        sipNameNr_EffectWidget,
        {0, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_Phonon_EffectWidget,
    -1,
    -1,
    supers_Phonon_EffectWidget,
    0,
    init_type_Phonon_EffectWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_EffectWidget,
    0,
    0,
    0,
    release_Phonon_EffectWidget,
    cast_Phonon_EffectWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &Phonon::EffectWidget::staticMetaObject,
    0,
    0
};

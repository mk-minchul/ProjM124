/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtWebKit/qwebinspector.sip"
#include <qwebinspector.h>
#line 29 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"

#line 32 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 578 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 36 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 611 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 600 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 565 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 54 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 34 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 60 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 34 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 69 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 72 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 31 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 78 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 81 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 84 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 87 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 32 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 90 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 99 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 102 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 105 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 108 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 114 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 269 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 117 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 651 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 743 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 796 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 769 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 785 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 858 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 622 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 552 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 509 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 478 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 351 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 256 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 162 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 165 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 34 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 168 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 171 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 174 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 177 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 180 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 186 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 189 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 192 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 195 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 198 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 201 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 204 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 207 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 210 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 213 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 216 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 219 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 222 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtWebKit/sipQtWebKitQWebInspector.cpp"


class sipQWebInspector : public QWebInspector
{
public:
    sipQWebInspector(QWidget*);
    virtual ~sipQWebInspector();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const QFont&);
    void paletteChange(const QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    void setVisible(bool);
    int devType() const;
    void closeEvent(QCloseEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QResizeEvent*);
    bool event(QEvent*);
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebInspector(const sipQWebInspector &);
    sipQWebInspector &operator = (const sipQWebInspector &);

    char sipPyMethods[47];
};

sipQWebInspector::sipQWebInspector(QWidget*a0): QWebInspector(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebInspector::~sipQWebInspector()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebInspector::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebInspector);
}

int sipQWebInspector::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebInspector::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebInspector,_c,_id,_a);

    return _id;
}

void *sipQWebInspector::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebInspector, _clname)) ? this : QWebInspector::qt_metacast(_clname);
}

void sipQWebInspector::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebInspector::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebInspector::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebInspector::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebInspector::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebInspector::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebInspector::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebInspector::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWebInspector::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
        QWebInspector::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebInspector::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
        QWebInspector::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
        QWebInspector::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFont&);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
        QWebInspector::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPalette&);

    ((sipVH_QtGui_10)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[10]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
        QWebInspector::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebInspector::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QWebInspector::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[11]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQWebInspector::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QWebInspector::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[12]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QWebInspector::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtGui_13)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[13]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWebInspector::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QWebInspector::metric(a0);

    typedef int (*sipVH_QtGui_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[14]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QWebInspector::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QWebInspector::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    ((sipVH_QtGui_15)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[15]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QWebInspector::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    ((sipVH_QtGui_16)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[16]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QWebInspector::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QWebInspector::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    ((sipVH_QtGui_18)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QWebInspector::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    ((sipVH_QtGui_19)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[19]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWebInspector::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_20)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[20]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QWebInspector::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    ((sipVH_QtGui_21)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[21]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWebInspector::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_23)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[23]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QWebInspector::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[3]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QWebInspector::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QWebInspector::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QWebInspector::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QWebInspector::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWebInspector::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QWebInspector::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_25)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QWebInspector::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QWebInspector::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QWebInspector::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QWebInspector::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QWebInspector::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_26)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[26]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQWebInspector::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QWebInspector::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[27]))(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQWebInspector::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QWebInspector::heightForWidth(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[28]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQWebInspector::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QWebInspector::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebInspector::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QWebInspector::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWebInspector::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QWebInspector::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWebInspector::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QWebInspector::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[22]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWebInspector::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[0]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWebInspector::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[1]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWebInspector::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QWebInspector::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[2]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWebInspector::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebInspector::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QSize sipQWebInspector::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QWebInspector::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_4)(sipModuleAPI_QtWebKit_QtGui->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWebInspector_setPage, "setPage(self, QWebPage)");

extern "C" {static PyObject *meth_QWebInspector_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage* a0;
        PyObject *a0Keep;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebInspector, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -3, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_setPage, doc_QWebInspector_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_page, "page(self) -> QWebPage");

extern "C" {static PyObject *meth_QWebInspector_page(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebInspector, &sipCpp))
        {
            QWebPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_page, doc_QWebInspector_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QWebInspector_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebInspector, &sipCpp))
        {
            QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWebInspector::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_sizeHint, doc_QWebInspector_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWebInspector_event(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebInspector, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebInspector::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_event, doc_QWebInspector_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QWebInspector_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebInspector, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebInspector::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_resizeEvent, doc_QWebInspector_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QWebInspector_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebInspector, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebInspector::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_showEvent, doc_QWebInspector_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_hideEvent, "hideEvent(self, QHideEvent)");

extern "C" {static PyObject *meth_QWebInspector_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebInspector, &sipCpp, sipType_QHideEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebInspector::hideEvent(a0) : sipCpp->hideEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_hideEvent, doc_QWebInspector_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebInspector_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QWebInspector_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebInspector_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        QWebInspector *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWebInspector, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebInspector::closeEvent(a0) : sipCpp->closeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebInspector, sipName_closeEvent, doc_QWebInspector_closeEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QWebInspector(void *, const sipTypeDef *);}
static void *cast_QWebInspector(void *sipCppV, const sipTypeDef *targetType)
{
    QWebInspector *sipCpp = reinterpret_cast<QWebInspector *>(sipCppV);

    if (targetType == sipType_QPaintDevice)
        return static_cast<QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebInspector(void *, int);}
static void release_QWebInspector(void *sipCppV,int)
{
    QWebInspector *sipCpp = reinterpret_cast<QWebInspector *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebInspector(sipSimpleWrapper *);}
static void dealloc_QWebInspector(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebInspector *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebInspector(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebInspector(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebInspector(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebInspector *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebInspector(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebInspector[] = {{755, 2, 1}};


static PyMethodDef methods_QWebInspector[] = {
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QWebInspector_closeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_closeEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebInspector_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_event)},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QWebInspector_hideEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_hideEvent)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebInspector_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_page)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWebInspector_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWebInspector_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_setPage)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QWebInspector_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWebInspector_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebInspector_sizeHint)}
};

PyDoc_STRVAR(doc_QWebInspector, "\1QWebInspector(parent: QWidget = None)");


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebInspector = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebInspector,
        {0}
    },
    {
        sipNameNr_QWebInspector,
        {0, 0, 1},
        8, methods_QWebInspector,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebInspector,
    -1,
    -1,
    supers_QWebInspector,
    0,
    init_type_QWebInspector,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebInspector,
    0,
    0,
    0,
    release_QWebInspector,
    cast_QWebInspector,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebInspector::staticMetaObject,
    0,
    0
};

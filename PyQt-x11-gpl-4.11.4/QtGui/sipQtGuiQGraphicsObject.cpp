/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.18.1
 *
 * Copyright (c) 2015 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 1144 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 29 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"

#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 33 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 269 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 57 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 31 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 75 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 114 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 81 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 28 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicstransform.sip"
#include <qgraphicstransform.h>
#line 87 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 90 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 163 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 93 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 96 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 99 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 102 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 105 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 108 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 182 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 111 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 78 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 114 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 48 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 117 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 478 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 651 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 135 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 126 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 509 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 188 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 132 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 105 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 135 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 354 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 138 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 141 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 1970 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 144 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 32 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 147 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 150 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 30 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 156 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 159 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 1104 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 162 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"
#line 34 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 165 "/home/pi/Github/ProjM124/PyQt-x11-gpl-4.11.4/QtGui/sipQtGuiQGraphicsObject.cpp"


class sipQGraphicsObject : public QGraphicsObject
{
public:
    sipQGraphicsObject(QGraphicsItem*);
    virtual ~sipQGraphicsObject();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void wheelEvent(QGraphicsSceneWheelEvent*);
    bool sceneEventFilter(QGraphicsItem*,QEvent*);
    bool sceneEvent(QEvent*);
    void mouseReleaseEvent(QGraphicsSceneMouseEvent*);
    void mousePressEvent(QGraphicsSceneMouseEvent*);
    void mouseMoveEvent(QGraphicsSceneMouseEvent*);
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    QVariant itemChange(QGraphicsItem::GraphicsItemChange,const QVariant&);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    void hoverMoveEvent(QGraphicsSceneHoverEvent*);
    void hoverLeaveEvent(QGraphicsSceneHoverEvent*);
    void hoverEnterEvent(QGraphicsSceneHoverEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QGraphicsSceneDragDropEvent*);
    void dragMoveEvent(QGraphicsSceneDragDropEvent*);
    void dragLeaveEvent(QGraphicsSceneDragDropEvent*);
    void dragEnterEvent(QGraphicsSceneDragDropEvent*);
    void contextMenuEvent(QGraphicsSceneContextMenuEvent*);
    int type() const;
    void paint(QPainter*,const QStyleOptionGraphicsItem*,QWidget*);
    QPainterPath opaqueArea() const;
    bool isObscuredBy(const QGraphicsItem*) const;
    bool collidesWithPath(const QPainterPath&,Qt::ItemSelectionMode) const;
    bool collidesWithItem(const QGraphicsItem*,Qt::ItemSelectionMode) const;
    bool contains(const QPointF&) const;
    QPainterPath shape() const;
    QRectF boundingRect() const;
    void advance(int);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsObject(const sipQGraphicsObject &);
    sipQGraphicsObject &operator = (const sipQGraphicsObject &);

    char sipPyMethods[39];
};

sipQGraphicsObject::sipQGraphicsObject(QGraphicsItem*a0): QGraphicsObject(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsObject::~sipQGraphicsObject()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsObject::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsObject);
}

int sipQGraphicsObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsObject,_c,_id,_a);

    return _id;
}

void *sipQGraphicsObject::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QGraphicsObject, _clname)) ? this : QGraphicsObject::qt_metacast(_clname);
}

void sipQGraphicsObject::wheelEvent(QGraphicsSceneWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGraphicsObject::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_199(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneWheelEvent*);

    sipVH_QtGui_199(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsObject::sceneEventFilter(QGraphicsItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!sipMeth)
        return QGraphicsObject::sceneEventFilter(a0,a1);

    extern bool sipVH_QtGui_208(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsItem*,QEvent*);

    return sipVH_QtGui_208(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsObject::sceneEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_sceneEvent);

    if (!sipMeth)
        return QGraphicsObject::sceneEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::mouseReleaseEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsObject::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_200(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtGui_200(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::mousePressEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGraphicsObject::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_200(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtGui_200(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::mouseMoveEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGraphicsObject::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_200(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtGui_200(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::mouseDoubleClickEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGraphicsObject::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_200(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtGui_200(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsObject::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGraphicsObject::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsObject::itemChange(QGraphicsItem::GraphicsItemChange a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
        return QGraphicsObject::itemChange(a0,a1);

    extern QVariant sipVH_QtGui_191(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsItem::GraphicsItemChange,const QVariant&);

    return sipVH_QtGui_191(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QVariant sipQGraphicsObject::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGraphicsObject::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGraphicsObject::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::hoverMoveEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QGraphicsObject::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    sipVH_QtGui_187(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::hoverLeaveEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsObject::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    sipVH_QtGui_187(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::hoverEnterEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QGraphicsObject::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    sipVH_QtGui_187(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGraphicsObject::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGraphicsObject::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::dropEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGraphicsObject::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_202(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtGui_202(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::dragMoveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGraphicsObject::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_202(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtGui_202(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::dragLeaveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsObject::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_202(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtGui_202(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::dragEnterEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGraphicsObject::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_202(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtGui_202(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::contextMenuEvent(QGraphicsSceneContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGraphicsObject::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_203(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneContextMenuEvent*);

    sipVH_QtGui_203(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQGraphicsObject::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QGraphicsObject::type();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsObject::paint(QPainter*a0,const QStyleOptionGraphicsItem*a1,QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,sipName_QGraphicsObject,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_196(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionGraphicsItem*,QWidget*);

    sipVH_QtGui_196(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

QPainterPath sipQGraphicsObject::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_opaqueArea);

    if (!sipMeth)
        return QGraphicsObject::opaqueArea();

    extern QPainterPath sipVH_QtGui_194(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_194(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQGraphicsObject::isObscuredBy(const QGraphicsItem*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!sipMeth)
        return QGraphicsObject::isObscuredBy(a0);

    extern bool sipVH_QtGui_206(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGraphicsItem*);

    return sipVH_QtGui_206(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsObject::collidesWithPath(const QPainterPath& a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!sipMeth)
        return QGraphicsObject::collidesWithPath(a0,a1);

    extern bool sipVH_QtGui_209(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPainterPath&,Qt::ItemSelectionMode);

    return sipVH_QtGui_209(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsObject::collidesWithItem(const QGraphicsItem*a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!sipMeth)
        return QGraphicsObject::collidesWithItem(a0,a1);

    extern bool sipVH_QtGui_210(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGraphicsItem*,Qt::ItemSelectionMode);

    return sipVH_QtGui_210(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsObject::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QGraphicsObject::contains(a0);

    extern bool sipVH_QtGui_207(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return sipVH_QtGui_207(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QPainterPath sipQGraphicsObject::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_shape);

    if (!sipMeth)
        return QGraphicsObject::shape();

    extern QPainterPath sipVH_QtGui_194(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_194(sipGILState, 0, sipPySelf, sipMeth);
}

QRectF sipQGraphicsObject::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,sipName_QGraphicsObject,sipName_boundingRect);

    if (!sipMeth)
        return QRectF();

    extern QRectF sipVH_QtGui_195(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_195(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQGraphicsObject::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_advance);

    if (!sipMeth)
    {
        QGraphicsObject::advance(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtGui_QtCore->em_virthandlers[4]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    ((sipVH_QtCore_24)(sipModuleAPI_QtGui_QtCore->em_virthandlers[24]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGraphicsObject::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGraphicsObject::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsObject::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGraphicsObject_grabGesture, "grabGesture(self, Qt.GestureType, flags: Qt.GestureFlags = Qt.GestureFlags(0))");

extern "C" {static PyObject *meth_QGraphicsObject_grabGesture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsObject_grabGesture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GestureType a0;
        Qt::GestureFlags a1def = Qt::GestureFlags(0);
        Qt::GestureFlags* a1 = &a1def;
        int a1State = 0;
        QGraphicsObject *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J1", &sipSelf, sipType_QGraphicsObject, &sipCpp, sipType_Qt_GestureType, &a0, sipType_Qt_GestureFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->grabGesture(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_GestureFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsObject, sipName_grabGesture, doc_QGraphicsObject_grabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsObject_ungrabGesture, "ungrabGesture(self, Qt.GestureType)");

extern "C" {static PyObject *meth_QGraphicsObject_ungrabGesture(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsObject_ungrabGesture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GestureType a0;
        QGraphicsObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsObject, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ungrabGesture(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsObject, sipName_ungrabGesture, doc_QGraphicsObject_ungrabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsObject_updateMicroFocus, "updateMicroFocus(self)");

extern "C" {static PyObject *meth_QGraphicsObject_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsObject_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QGraphicsObject, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsObject, sipName_updateMicroFocus, doc_QGraphicsObject_updateMicroFocus);

    return NULL;
}


/* Cast a pointer to a type somewhere in its multiple inheritance hierarchy. */
extern "C" {static void *cast_QGraphicsObject(void *, const sipTypeDef *);}
static void *cast_QGraphicsObject(void *sipCppV, const sipTypeDef *targetType)
{
    QGraphicsObject *sipCpp = reinterpret_cast<QGraphicsObject *>(sipCppV);

    if (targetType == sipType_QGraphicsItem)
        return static_cast<QGraphicsItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsObject(void *, int);}
static void release_QGraphicsObject(void *sipCppV,int)
{
    QGraphicsObject *sipCpp = reinterpret_cast<QGraphicsObject *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsObject(sipSimpleWrapper *);}
static void dealloc_QGraphicsObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsObject *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsObject(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsObject *sipCpp = 0;

    {
        QGraphicsItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QGraphicsItem, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsObject(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsObject[] = {{141, 0, 0}, {171, 255, 1}};


static PyMethodDef methods_QGraphicsObject[] = {
    {SIP_MLNAME_CAST(sipName_grabGesture), (PyCFunction)meth_QGraphicsObject_grabGesture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsObject_grabGesture)},
    {SIP_MLNAME_CAST(sipName_ungrabGesture), meth_QGraphicsObject_ungrabGesture, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsObject_ungrabGesture)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QGraphicsObject_updateMicroFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsObject_updateMicroFocus)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QGraphicsObject[] = {
    {"scaleChanged()", "\1scaleChanged(self)", 0, 0},
    {"rotationChanged()", "\1rotationChanged(self)", 0, 0},
    {"zChanged()", "\1zChanged(self)", 0, 0},
    {"yChanged()", "\1yChanged(self)", 0, 0},
    {"xChanged()", "\1xChanged(self)", 0, 0},
    {"enabledChanged()", "\1enabledChanged(self)", 0, 0},
    {"visibleChanged()", "\1visibleChanged(self)", 0, 0},
    {"opacityChanged()", "\1opacityChanged(self)", 0, 0},
    {"parentChanged()", "\1parentChanged(self)", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsObject, "\1QGraphicsObject(parent: QGraphicsItem = None)");


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsObject,
        {0}
    },
    {
        sipNameNr_QGraphicsObject,
        {0, 0, 1},
        3, methods_QGraphicsObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsObject,
    -1,
    -1,
    supers_QGraphicsObject,
    0,
    init_type_QGraphicsObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsObject,
    0,
    0,
    0,
    release_QGraphicsObject,
    cast_QGraphicsObject,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsObject::staticMetaObject,
    0,
    signals_QGraphicsObject,
};
